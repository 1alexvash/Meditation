{"version":3,"sources":["App.js","serviceWorker.js","index.js","music/ocean-waves.mp3"],"names":["noSleep","noSleepLibrary","App","state","isMeditating","isMusicAllowed","breatheDirection","time","_this2","this","_this$state","sound","Audio","Sound","play","enable","setState","timer","setInterval","setTimeout","clearInterval","pause","currentTime","disable","_this3","_this$state2","meditating","react_default","a","createElement","className","notMeditating","onClick","startMeditation","htmlFor","type","defaultChecked","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+PAMIA,EAAU,WAAIC,GA+EHC,6MA5EbC,MAAQ,CACNC,cAAc,EACdC,gBAAgB,EAChBC,iBAAkB,qGAGJC,GAAM,IAAAC,EAAAC,KAAAC,EACuBD,KAAKN,MAA1CG,EADcI,EACdJ,iBAAkBD,EADJK,EACIL,eAGpBM,EAAQ,IAAIC,MAAMC,KAClBR,GACFM,EAAMG,OAERd,EAAQe,SAERN,KAAKO,SAAS,CAAEZ,cAAc,IAG9B,IAAIa,EAAQC,YAAY,WAEpBZ,EADuB,eAArBA,EACiB,YAEA,aAErBE,EAAKQ,SAAS,CAAEV,sBACf,KAEHa,WAAW,WACTC,cAAcH,GACdT,EAAKQ,SAAS,CAAEZ,cAAc,IAG9BO,EAAMU,QACNV,EAAMW,YAAc,EACpBtB,EAAQuB,WACP,IAAQhB,oCAGJ,IAAAiB,EAAAf,KAAAgB,EACoDhB,KAAKN,MAAxDC,EADDqB,EACCrB,aAAcE,EADfmB,EACenB,iBAAkBD,EADjCoB,EACiCpB,eAElCqB,EACJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOxB,IAIlByB,EACJJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,4BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMR,EAAKS,gBAAgB,KAA5C,SACAN,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMR,EAAKS,gBAAgB,KAA5C,SACAN,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMR,EAAKS,gBAAgB,KAA5C,UAEFN,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVI,QAAQ,QACRF,QAAS,kBAAMR,EAAKR,SAAS,CAAEX,gBAAiBA,MAHlD,QAMEsB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWC,eAAgB/B,EAAgBgC,GAAG,YAKhE,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO1B,EAAesB,EAAaK,UAxEtCO,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.be79ddfe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./scss/main.css\";\r\nimport Sound from \"./music/ocean-waves.mp3\";\r\nimport noSleepLibrary from \"nosleep.js\";\r\n\r\n// library that prevents mobile from diming\r\nlet noSleep = new noSleepLibrary();\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isMeditating: false,\r\n    isMusicAllowed: true,\r\n    breatheDirection: \"Breathe In and Out\"\r\n  };\r\n\r\n  startMeditation(time) {\r\n    let { breatheDirection, isMusicAllowed } = this.state;\r\n\r\n    // Start playing music if allowed\r\n    let sound = new Audio(Sound);\r\n    if (isMusicAllowed) {\r\n      sound.play();\r\n    }\r\n    noSleep.enable();\r\n\r\n    this.setState({ isMeditating: true });\r\n\r\n    // Changing text from breah in to breath out and back\r\n    let timer = setInterval(() => {\r\n      if (breatheDirection === \"Breath Out\") {\r\n        breatheDirection = \"Breath In\";\r\n      } else {\r\n        breatheDirection = \"Breath Out\";\r\n      }\r\n      this.setState({ breatheDirection });\r\n    }, 5000);\r\n\r\n    setTimeout(() => {\r\n      clearInterval(timer); // Deleting the timer for text changing\r\n      this.setState({ isMeditating: false }); // back to the main screen\r\n\r\n      // Stop playing music\r\n      sound.pause();\r\n      sound.currentTime = 0;\r\n      noSleep.disable();\r\n    }, 60000 * time); // Stop meditation\r\n  }\r\n\r\n  render() {\r\n    const { isMeditating, breatheDirection, isMusicAllowed } = this.state;\r\n\r\n    const meditating = (\r\n      <div className=\"meditating\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\" />\r\n        </div>\r\n        <p className=\"tip\">{breatheDirection}</p>\r\n      </div>\r\n    );\r\n\r\n    const notMeditating = (\r\n      <div>\r\n        <h1 className=\"heading\">Choose time to meditate:</h1>\r\n        <div className=\"meditation-time\">\r\n          <button onClick={() => this.startMeditation(1)}>1 min</button>\r\n          <button onClick={() => this.startMeditation(2)}>2 min</button>\r\n          <button onClick={() => this.startMeditation(5)}>5 min</button>\r\n        </div>\r\n        <label\r\n          className=\"music\"\r\n          htmlFor=\"music\"\r\n          onClick={() => this.setState({ isMusicAllowed: !isMusicAllowed })}\r\n        >\r\n          Music\r\n          <input type=\"checkbox\" defaultChecked={isMusicAllowed} id=\"music\" />\r\n        </label>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">{isMeditating ? meditating : notMeditating}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/ocean-waves.234a56ee.mp3\";"],"sourceRoot":""}