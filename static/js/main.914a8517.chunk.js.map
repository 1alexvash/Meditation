{"version":3,"sources":["App.js","serviceWorker.js","index.js","music/ocean-waves.mp3"],"names":["App","state","isMeditating","isMusicAllowed","breatheDirection","time","_this2","this","_this$state","sound","Audio","Sound","play","setState","timer","setInterval","setTimeout","clearInterval","pause","currentTime","_this3","_this$state2","meditating","react_default","a","createElement","className","notMeditating","onClick","startMeditation","htmlFor","type","defaultChecked","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oNA+EeA,6MA1EbC,MAAQ,CACNC,cAAc,EACdC,gBAAgB,EAChBC,iBAAkB,qGAGJC,GAAM,IAAAC,EAAAC,KAAAC,EACuBD,KAAKN,MAA1CG,EADcI,EACdJ,iBAAkBD,EADJK,EACIL,eAGpBM,EAAQ,IAAIC,MAAMC,KAClBR,GACFM,EAAMG,OAGRL,KAAKM,SAAS,CAAEX,cAAc,IAG9B,IAAIY,EAAQC,YAAY,WAEpBX,EADuB,eAArBA,EACiB,YAEA,aAErBE,EAAKO,SAAS,CAAET,sBACf,KAEHY,WAAW,WACTC,cAAcH,GACdR,EAAKO,SAAS,CAAEX,cAAc,IAG9BO,EAAMS,QACNT,EAAMU,YAAc,GACnB,IAAQd,oCAGJ,IAAAe,EAAAb,KAAAc,EACoDd,KAAKN,MAAxDC,EADDmB,EACCnB,aAAcE,EADfiB,EACejB,iBAAkBD,EADjCkB,EACiClB,eAElCmB,EACJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOtB,IAIlBuB,EACJJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,4BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMR,EAAKS,gBAAgB,KAA5C,SACAN,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMR,EAAKS,gBAAgB,KAA5C,SACAN,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMR,EAAKS,gBAAgB,KAA5C,UAEFN,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVI,QAAQ,QACRF,QAAS,kBAAMR,EAAKP,SAAS,CAAEV,gBAAiBA,MAHlD,QAMEoB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWC,eAAgB7B,EAAgB8B,GAAG,YAKhE,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOxB,EAAeoB,EAAaK,UAtEtCO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.914a8517.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./scss/main.css\";\nimport Sound from \"./music/ocean-waves.mp3\";\n\nclass App extends Component {\n  state = {\n    isMeditating: false,\n    isMusicAllowed: true,\n    breatheDirection: \"Breathe In and Out\"\n  };\n\n  startMeditation(time) {\n    let { breatheDirection, isMusicAllowed } = this.state;\n\n    // Start playing music if allowed\n    let sound = new Audio(Sound);\n    if (isMusicAllowed) {\n      sound.play();\n    }\n\n    this.setState({ isMeditating: true });\n\n    // Changing text from breah in to breath out and back\n    let timer = setInterval(() => {\n      if (breatheDirection === \"Breath Out\") {\n        breatheDirection = \"Breath In\";\n      } else {\n        breatheDirection = \"Breath Out\";\n      }\n      this.setState({ breatheDirection });\n    }, 5000);\n\n    setTimeout(() => {\n      clearInterval(timer); // Deleting the timer for text changing\n      this.setState({ isMeditating: false }); // back to the main screen\n\n      // Stop playing music\n      sound.pause();\n      sound.currentTime = 0;\n    }, 60000 * time); // Stop meditation\n  }\n\n  render() {\n    const { isMeditating, breatheDirection, isMusicAllowed } = this.state;\n\n    const meditating = (\n      <div className=\"meditating\">\n        <div className=\"outer-circle\">\n          <div className=\"inner-circle\" />\n        </div>\n        <p className=\"tip\">{breatheDirection}</p>\n      </div>\n    );\n\n    const notMeditating = (\n      <div>\n        <h1 className=\"heading\">Choose time to meditate:</h1>\n        <div className=\"meditation-time\">\n          <button onClick={() => this.startMeditation(1)}>1 min</button>\n          <button onClick={() => this.startMeditation(2)}>2 min</button>\n          <button onClick={() => this.startMeditation(5)}>5 min</button>\n        </div>\n        <label\n          className=\"music\"\n          htmlFor=\"music\"\n          onClick={() => this.setState({ isMusicAllowed: !isMusicAllowed })}\n        >\n          Music\n          <input type=\"checkbox\" defaultChecked={isMusicAllowed} id=\"music\" />\n        </label>\n      </div>\n    );\n\n    return (\n      <div className=\"App\">{isMeditating ? meditating : notMeditating}</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ocean-waves.234a56ee.mp3\";"],"sourceRoot":""}